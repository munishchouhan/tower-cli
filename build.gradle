buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
    }
}

plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'org.graalvm.buildtools.native'
}

repositories {
    mavenCentral()
    maven { url = "https://s3-eu-west-1.amazonaws.com/maven.seqera.io/releases" }
}

dependencies {
    implementation 'javax.activation:activation:1.1.1'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'ch.qos.logback:logback-core:1.2.6'
    implementation 'ch.qos.logback:logback-classic:1.2.6'
    implementation 'io.seqera:tower-java-sdk:1.2.1'
    implementation 'info.picocli:picocli:4.6.1'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.1'

    testImplementation 'org.mock-server:mockserver-client-java:5.11.2'
    testImplementation 'org.mock-server:mockserver-netty:5.11.2'
    testImplementation 'org.mock-server:mockserver-junit-jupiter:5.11.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

}

license {
    header = project.file('HEADER.txt')
    properties {
        name = 'Seqera Labs'
        year = 2021
    }
    exclude '**/*.properties'
    exclude 'gradlew'
    exclude 'conf/**'
}

task buildInfo {
    doLast {
        def version = rootProject.file('VERSION').text.trim()
        def versionApi = rootProject.file('VERSION-API').text.trim()
        def commitId = System.env.getOrDefault("GITHUB_SHA", "unknown").substring(0,7)
        def info = """\
                    version=${version}
                    versionApi=${versionApi}
                    commitId=${commitId}
                """.stripIndent().toString()
        def f = file("src/main/resources/META-INF/build-info.properties")
        f.parentFile.mkdirs()
        f.text = info
    }
}

compileJava {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
    options.compilerArgs += ["-Aproject=${project.name}"]
    dependsOn buildInfo
}

application {
    mainClass.set('io.seqera.tower.cli.Tower')
    applicationDefaultJvmArgs = ["-agentlib:native-image-agent=config-merge-dir=conf/"]
}


test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    dependsOn checkLicenses
}

graalvmNative {
    binaries {
        main {
            imageName = 'tw'
            mainClass = 'io.seqera.tower.cli.Tower'
            configurationFileDirectories.from(file('conf'))

            buildArgs(org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem.isLinux() ? ['--static', '--libc=musl'] : [])
            buildArgs.add('--allow-incomplete-classpath')
            buildArgs.add('--report-unsupported-elements-at-runtime')
            buildArgs.add('-H:+AddAllCharsets')
            buildArgs.add('-H:EnableURLProtocols=https,http')
            buildArgs.add('-H:+ReportExceptionStackTraces')

        }

        test {
            verbose = true
            agent = false
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

project.ext {
    mainClassName = "io.seqera.tower.cli.Tower"
}

task generateManpageAsciiDoc(type: JavaExec) {
    dependsOn(classes)
    group = "Documentation"
    description = "Generate AsciiDoc manpage"
    classpath(configurations.compileClasspath, configurations.annotationProcessor, sourceSets.main.runtimeClasspath)
    main 'picocli.codegen.docgen.manpage.ManPageGenerator'
    args project.ext.mainClassName, "--outdir=${project.buildDir}/generated-picocli-docs", "-v"
}

apply plugin: 'org.asciidoctor.jvm.convert'
asciidoctor {
    dependsOn(generateManpageAsciiDoc)
    sourceDir = file("${project.buildDir}/generated-picocli-docs")
    outputDir = file("${project.buildDir}/docs")
    logDocuments = true
    outputOptions {
        backends = ['html5']
    }

    doFirst {
        def adocsDir = file("${project.buildDir}/generated-picocli-docs")
        adocsDir.listFiles().each {
            it.text = ":stylesheet: docs/fedora.css\n" + it.text
        }
    }

    doLast {
        def htmlDir = file("${project.buildDir}/docs")

        def index = file("${project.buildDir}/docs/index.html")
        def indexHtml = """\
                <!DOCTYPE html>
                <html lang="en">
                <frameset cols="20,80">
                    <frame src="toc.html" name="toc"></frame>
                    <frame src="tw.html" name="content"></frame>
                </frameset>
                </html>
                """.stripIndent().toString()
        index.text = indexHtml

        def toc = file("${project.buildDir}/docs/toc.html")
        def tocItems = htmlDir.listFiles()
                .collect { it.name.replace(".html", "") }
                .findAll { it.startsWith("tw") }
                .sort()
                .collect { "<li><a href=\"${it}.html\" target=\"content\">${it}</a></li>" }.join("\n")
        def tocHtml = """\
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>Tower CLI Command Index</title>
                </head>
                <body>
                <ul>
                ${tocItems}
                </ul>
                """.stripIndent().toString()
        toc.text = tocHtml

    }
}
