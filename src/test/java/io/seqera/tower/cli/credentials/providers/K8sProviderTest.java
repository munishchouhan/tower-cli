/*
 * Copyright 2021-2023, Seqera.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.seqera.tower.cli.credentials.providers;

import io.seqera.tower.cli.BaseCmdTest;
import io.seqera.tower.cli.commands.enums.OutputType;
import io.seqera.tower.cli.responses.CredentialsAdded;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.EnumSource;
import org.mockserver.client.MockServerClient;
import org.mockserver.model.MediaType;

import java.io.IOException;

import static io.seqera.tower.cli.commands.AbstractApiCmd.USER_WORKSPACE_NAME;
import static org.mockserver.matchers.Times.exactly;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;
import static org.mockserver.model.JsonBody.json;

class K8sProviderTest extends BaseCmdTest {

    @ParameterizedTest
    @EnumSource(OutputType.class)
    void testAddWithCertificate(OutputType format, MockServerClient mock) throws IOException {

        mock.when(
                request()
                        .withMethod("POST")
                        .withPath("/credentials")
                        .withBody(json("{\"credentials\":{\"keys\":{\"certificate\":\"my_certificate\",\"privateKey\":\"my_private_key\"},\"name\":\"k8s\",\"provider\":\"k8s\"}}")),
                exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"credentialsId\":\"1cz5A8cuBkB5iJliCwJCFU\"}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(format, mock, "credentials", "add", "k8s", "-n", "k8s", "-k", tempFile("my_private_key", "", ".key"), "-c", tempFile("my_certificate", "", ".crt"));
        assertOutput(format, out, new CredentialsAdded("K8S", "1cz5A8cuBkB5iJliCwJCFU", "k8s", USER_WORKSPACE_NAME));
    }

    @ParameterizedTest
    @EnumSource(OutputType.class)
    void testAddWithToken(OutputType format, MockServerClient mock) {
        mock.when(
                request()
                        .withMethod("POST")
                        .withPath("/credentials")
                        .withBody(json("{\"credentials\":{\"keys\":{\"token\":\"my_token\"},\"name\":\"k8s\",\"provider\":\"k8s\"}}")),
                exactly(1)
        ).respond(
                response().withStatusCode(200).withBody("{\"credentialsId\":\"1cz5A8cuBkB5iJliCwJCFU\"}").withContentType(MediaType.APPLICATION_JSON)
        );

        ExecOut out = exec(format, mock, "credentials", "add", "k8s", "-n", "k8s", "-t", "my_token");
        assertOutput(format, out, new CredentialsAdded("K8S", "1cz5A8cuBkB5iJliCwJCFU", "k8s", USER_WORKSPACE_NAME));
    }

}
